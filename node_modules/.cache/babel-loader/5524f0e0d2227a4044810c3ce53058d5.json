{"ast":null,"code":"import _objectSpread from\"/Users/shannasmith/code/projects/memory/memory-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/shannasmith/code/projects/memory/memory-game/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from'react';import'./App.css';import Card from'./components/Card';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var images=[{src:'images/brook.png',matched:false},{src:'images/chopper.png',matched:false},{src:'images/franky.png',matched:false},{src:'images/luffy.png',matched:false},{src:'images/nami.png',matched:false},{src:'images/robin.png',matched:false},{src:'images/sanji.png',matched:false},{src:'images/ussop.png',matched:false},{src:'images/zoro.png',matched:false}];function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),turns=_useState4[0],setTurns=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),firstChoice=_useState6[0],setFirstChoice=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),secondChoice=_useState8[0],setSecondChoice=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),disabled=_useState10[0],setDisabled=_useState10[1];// to shuffle cards:\nvar shuffleCards=function shuffleCards(){var shuffledCards=[].concat(images,images).sort(function(){return Math.random()-0.5;}).map(function(card){return _objectSpread(_objectSpread({},card),{},{id:Math.random()});});setFirstChoice(null);setSecondChoice(null);setCards(shuffledCards);setTurns(0);};// to make a card selection\nvar choice=function choice(card){firstChoice?setSecondChoice(card):setFirstChoice(card);};// compare selected cards\nuseEffect(function(){if(firstChoice&&secondChoice){setDisabled(true);if(firstChoice.src===secondChoice.src){setCards(function(prevCards){return prevCards.map(function(card){if(card.src===firstChoice.src){return _objectSpread(_objectSpread({},card),{},{matched:true});}else{return card;}});});reset();}else{setTimeout(function(){return reset();},2000);}}},[firstChoice,secondChoice]);// to start game automatically\nuseEffect(function(){shuffleCards();},[]);// reset choices and increase turn count\nvar reset=function reset(){setFirstChoice(null);setSecondChoice(null);setTurns(function(prevTurns){return prevTurns+1;});setDisabled(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Jolly Roger Memory Game\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"Can you match all the Straw Hat jolly rogers?\"}),/*#__PURE__*/_jsx(\"button\",{onClick:shuffleCards,children:\"New Game\"}),/*#__PURE__*/_jsx(\"div\",{className:\"card-grid\",children:cards.map(function(card){return/*#__PURE__*/_jsx(Card,{card:card,choice:choice,flipped:card===firstChoice||card===secondChoice||card.matched,disabled:disabled},card.id);})}),/*#__PURE__*/_jsxs(\"p\",{className:\"turns\",children:[\"Turns: \",turns]})]});}export default App;","map":{"version":3,"sources":["/Users/shannasmith/code/projects/memory/memory-game/src/App.js"],"names":["useEffect","useState","Card","images","src","matched","App","cards","setCards","turns","setTurns","firstChoice","setFirstChoice","secondChoice","setSecondChoice","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","choice","prevCards","reset","setTimeout","prevTurns"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport Card from './components/Card';\n\nconst images = [\n  { src: 'images/brook.png', matched: false },\n  { src: 'images/chopper.png', matched: false },\n  { src: 'images/franky.png', matched: false },\n  { src: 'images/luffy.png', matched: false },\n  { src: 'images/nami.png', matched: false },\n  { src: 'images/robin.png', matched: false },\n  { src: 'images/sanji.png', matched: false },\n  { src: 'images/ussop.png', matched: false },\n  { src: 'images/zoro.png', matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [firstChoice, setFirstChoice] = useState(null);\n  const [secondChoice, setSecondChoice] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // to shuffle cards:\n  const shuffleCards = () => {\n    const shuffledCards = [...images, ...images]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setFirstChoice(null);\n    setSecondChoice(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n  // to make a card selection\n  const choice = (card) => {\n    firstChoice ? setSecondChoice(card) : setFirstChoice(card);\n  };\n\n  // compare selected cards\n  useEffect(() => {\n    if (firstChoice && secondChoice) {\n      setDisabled(true);\n      if (firstChoice.src === secondChoice.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === firstChoice.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        reset();\n      } else {\n        setTimeout(() => reset(), 2000);\n      }\n    }\n  }, [firstChoice, secondChoice]);\n\n  // to start game automatically\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  // reset choices and increase turn count\n\n  const reset = () => {\n    setFirstChoice(null);\n    setSecondChoice(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Jolly Roger Memory Game</h1>\n      <h5>Can you match all the Straw Hat jolly rogers?</h5>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            choice={choice}\n            flipped={\n              card === firstChoice || card === secondChoice || card.matched\n            }\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p className=\"turns\">Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}