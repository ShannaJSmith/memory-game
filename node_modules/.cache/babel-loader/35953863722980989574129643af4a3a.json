{"ast":null,"code":"var _jsxFileName = \"/Users/shannasmith/code/projects/memory/memory-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = [{\n  src: 'images/brook.png',\n  matched: false\n}, {\n  src: 'images/chopper.png',\n  matched: false\n}, {\n  src: 'images/franky.png',\n  matched: false\n}, {\n  src: 'images/luffy.png',\n  matched: false\n}, {\n  src: 'images/nami.png',\n  matched: false\n}, {\n  src: 'images/robin.png',\n  matched: false\n}, {\n  src: 'images/sanji.png',\n  matched: false\n}, {\n  src: 'images/ussop.png',\n  matched: false\n}, {\n  src: 'images/zoro.png',\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [firstChoice, setFirstChoice] = useState(null);\n  const [secondChoice, setSecondChoice] = useState(null);\n  const [disabled, setDisabled] = useState(false); // to shuffle cards:\n\n  const shuffleCards = () => {\n    const shuffledCards = [...images, ...images].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // to make a card selection\n\n\n  const choice = card => {\n    firstChoice ? setSecondChoice(card) : setFirstChoice(card);\n  }; // compare selected cards\n\n\n  useEffect(() => {\n    if (firstChoice && secondChoice) {\n      setDisabled(true);\n\n      if (firstChoice.src === secondChoice.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === firstChoice.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        reset();\n      } else {\n        setTimeout(() => reset(), 2000);\n      }\n    }\n  }, [firstChoice, secondChoice]); // reset choices and increase turn count\n\n  const reset = () => {\n    setFirstChoice(null);\n    setSecondChoice(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jolly Roger Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        choice: choice,\n        flipped: card === firstChoice || card === secondChoice || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Turns: \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"k5WAibfCVJYfnJkC5Opy3UEm5jQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/shannasmith/code/projects/memory/memory-game/src/App.js"],"names":["useEffect","useState","Card","images","src","matched","App","cards","setCards","turns","setTurns","firstChoice","setFirstChoice","secondChoice","setSecondChoice","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","choice","prevCards","reset","setTimeout","prevTurns"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport Card from './components/Card';\n\nconst images = [\n  { src: 'images/brook.png', matched: false },\n  { src: 'images/chopper.png', matched: false },\n  { src: 'images/franky.png', matched: false },\n  { src: 'images/luffy.png', matched: false },\n  { src: 'images/nami.png', matched: false },\n  { src: 'images/robin.png', matched: false },\n  { src: 'images/sanji.png', matched: false },\n  { src: 'images/ussop.png', matched: false },\n  { src: 'images/zoro.png', matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [firstChoice, setFirstChoice] = useState(null);\n  const [secondChoice, setSecondChoice] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // to shuffle cards:\n  const shuffleCards = () => {\n    const shuffledCards = [...images, ...images]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n  // to make a card selection\n  const choice = (card) => {\n    firstChoice ? setSecondChoice(card) : setFirstChoice(card);\n  };\n\n  // compare selected cards\n  useEffect(() => {\n    if (firstChoice && secondChoice) {\n      setDisabled(true);\n      if (firstChoice.src === secondChoice.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === firstChoice.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        reset();\n      } else {\n        setTimeout(() => reset(), 2000);\n      }\n    }\n  }, [firstChoice, secondChoice]);\n\n  // reset choices and increase turn count\n\n  const reset = () => {\n    setFirstChoice(null);\n    setSecondChoice(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Jolly Roger Memory Game</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            choice={choice}\n            flipped={\n              card === firstChoice || card === secondChoice || card.matched\n            }\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}